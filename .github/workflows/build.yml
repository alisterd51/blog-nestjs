name: Build

on:
  push:
    branches:
      - master
  pull_request:
  merge_group:

permissions:
  contents: read

env:
  NODE_VERSION: 22

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

  lint-eslint:
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Clean install
        run: npm ci
      - name: Lint
        run: npm run lint

  lint-prettier:
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Clean install
        run: npm ci
      - name: Prettier
        run: npm run prettier

  lint-dockerfile:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20, 22]
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Clean install
        run: npm ci
      - name: Test
        run: npm run test

  coverage:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Clean install
        run: npm ci
      - name: Coverage
        run: npm run test:cov

  test-success:
    needs: [setup, test, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Fail for failed or cancelled tests
        if: |
          needs.test.result == 'failure' ||
          needs.test.result == 'cancelled'
        run: exit 1

      - name: Fail for skipped tests when PR is ready for review
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft != true &&
          needs.test.result == 'skipped'
        run: exit 1

      - name: Fail for failed or cancelled coverage
        if: |
          needs.coverage.result == 'failure' ||
          needs.coverage.result == 'cancelled'
        run: exit 1

      - name: Fail for skipped coverage when PR is ready for review
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft != true &&
          needs.coverage.result == 'skipped'
        run: exit 1

  test-e2e:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20, 22]
    services:
      postgres:
        image: postgres:16@sha256:d32f68374aa762a698438c0c37f1f7815ad5086cfc1a3869c390322cd7adeb74
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Clean install
        run: npm ci
      - name: Build
        run: npm run build
      - name: Test e2e
        run: npm run test:e2e
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      BLOG_ADMIN_USER: ${{ vars.BLOG_ADMIN_USER }}
      BLOG_ADMIN_PASSWORD: ${{ vars.BLOG_ADMIN_PASSWORD }}

  release:
    needs:
      - setup
      - lint-eslint
      - lint-prettier
      - lint-dockerfile
      - test
      - coverage
      - test-success
      - test-e2e
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GITHUB_TOKEN: ${{ github.token }}

  publish:
    needs:
      - release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3
      - name: Log in to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        with:
          images: anclarma/blog-nestjs
      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: anclarma/blog-nestjs:${{ needs.release.outputs.new_release_version }},anclarma/blog-nestjs:latest
          labels: ${{ steps.meta.outputs.labels }}
